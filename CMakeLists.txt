PROJECT(echo)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6.18)

set(CMAKE_CXX_FLAGS "-pipe -W -fPIC -Wno-deprecated -Wall -g -ggdb -std=c++11")

#如果libprotobuf是使用GCC 4.x或之前版本构建的，会有C++ ABI问题。
#在GCC 5（与C ++ 11相关的要求，但它适用，即使你不使用C ++ 11)中更改了相关类的的ABI
ADD_DEFINITIONS(-D_GLIBCXX_USE_CXX11_ABI=0)

#源码目录
SET(SRC_DIR ${CMAKE_SOURCE_DIR}/src)
MESSAGE(STATUS "SRC_DIR=" ${SRC_DIR})

#静态库目录
SET(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR}/third-party)
MESSAGE(STATUS "THIRD_PARTY_DIR=" ${THIRD_PARTY_DIR})

#utils
SET(UTILS_DIR ${SRC_DIR}/utils)
MESSAGE(STATUS "====>UTILS_DIR=" ${UTILS_DIR})
AUX_SOURCE_DIRECTORY(${UTILS_DIR} UTILS_SOURCE_LIST)
FOREACH (f ${UTILS_SOURCE_LIST})
    MESSAGE(STATUS "---->\t" ${f})
ENDFOREACH (${f})

#server
SET(SERVER_DIR ${SRC_DIR}/server)
MESSAGE(STATUS "====>SERVER_DIR=" ${SERVER_DIR})
AUX_SOURCE_DIRECTORY(${SERVER_DIR} SERVER_SOURCE_LIST)
FOREACH (f ${SERVER_SOURCE_LIST})
    MESSAGE(STATUS "---->\t" ${f})
ENDFOREACH (${f})

#client
SET(CLIENT_DIR ${SRC_DIR}/client)
MESSAGE(STATUS "====>CLIENT_DIR=" ${CLIENT_DIR})
AUX_SOURCE_DIRECTORY(${CLIENT_DIR} CLIENT_SOURCE_LIST)
FOREACH (f ${CLIENT_SOURCE_LIST})
    MESSAGE(STATUS "---->\t" ${f})
ENDFOREACH (${f})

#proto
SET(PROTO_DIR ${CMAKE_SOURCE_DIR}/proto/include/proto)
MESSAGE(STATUS "====>PROTO_DIR=" ${PROTO_DIR})
AUX_SOURCE_DIRECTORY(${PROTO_DIR} PROTO_SOURCE_LIST)
FOREACH (f ${PROTO_SOURCE_LIST})
    MESSAGE(STATUS "---->\t" ${f})
ENDFOREACH (${f})

#不管用不用得着，所有的源文件
SET(SERVER_BIN_SOURCE_LIST ${SERVER_SOURCE_LIST} ${UTILS_SOURCE_LIST} ${PROTO_SOURCE_LIST})
SET(CLIENT_BIN_SOURCE_LIST ${CLIENT_SOURCE_LIST} ${UTILS_SOURCE_LIST} ${PROTO_SOURCE_LIST})


#第三方库头文件及库文件设置，下面列出的静态库，不管用不用得着，先编进去再说
SET(ECHO_INCLUDE_LIST)
SET(ECHO_LIBRARY_LIST)
LIST(APPEND ECHO_INCLUDE_LIST ${CMAKE_SOURCE_DIR}/proto/include)

#boost
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/boost/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_atomic.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_chrono.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_container.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_context.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_coroutine.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_date_time.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_exception.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_filesystem.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_graph.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_iostreams.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_locale.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_log.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_log_setup.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_math_c99.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_math_c99f.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_math_c99l.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_math_tr1.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_math_tr1f.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_math_tr1l.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_prg_exec_monitor.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_program_options.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_random.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_regex.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_serialization.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_signals.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_system.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_test_exec_monitor.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_thread.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_timer.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_unit_test_framework.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_wave.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/boost/lib/libboost_wserialization.a)

#readline
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/readline/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/readline/lib/libhistory.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/readline/lib/libreadline.a)

#ncurses
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/ncurses/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libform.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libform_g.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libmenu.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libmenu_g.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libncurses.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libncurses++.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libncurses_g.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libncurses++_g.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libpanel.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/ncurses/lib/libpanel_g.a)

#curl
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/curl/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/curl/lib/libcurl.a)

#openssl
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/openssl/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/openssl/lib/libssl.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/openssl/lib/libcrypto.a)

#gmock
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/gmock/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/gmock/lib/libgmock.a)

#gtest
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/gtest/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/gtest/lib/libgtest.a)

#hiredis
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/hiredis/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/hiredis/lib/libhiredis.a)

#libevent
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/libevent/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/libevent/lib/libevent.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/libevent/lib/libevent_core.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/libevent/lib/libevent_extra.a)

#log4cplus
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/log4cplus/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/log4cplus/lib/liblog4cplus.a)

#mysql
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/mysql/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/mysql/lib/libmysqlclient.a)

#pcre
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/pcre/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/pcre/lib/libpcre.a)

#protobuf
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/protobuf/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/protobuf/lib/libprotobuf.a)

#thrift
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/thrift/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/thrift/lib/libthrift.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/thrift/lib/libthrift_c_glib.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/thrift/lib/libthriftnb.a)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/thrift/lib/libthriftz.a)

#uuid
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/uuid/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/uuid/lib/libuuid.a)

#yaml-cpp
LIST(APPEND ECHO_INCLUDE_LIST ${THIRD_PARTY_DIR}/yaml-cpp/include)
LIST(APPEND ECHO_LIBRARY_LIST ${THIRD_PARTY_DIR}/yaml-cpp/lib/libyaml-cpp.a)

#设置头目录
INCLUDE_DIRECTORIES(BEFORE ${ECHO_INCLUDE_LIST})

#一些比较基础的动态库
LIST(APPEND ECHO_LIBRARY_LIST pthread z dl m)

#客户端二进制文件
ADD_EXECUTABLE(client ${CLIENT_DIR}/client.cpp ${CLIENT_BIN_SOURCE_LIST})
#跟上面的一堆动态、静态库链接起来
TARGET_LINK_LIBRARIES(client ${ECHO_LIBRARY_LIST})

#服务端二进制文件
ADD_EXECUTABLE(server ${SERVER_DIR}/server.cpp ${SERVER_BIN_SOURCE_LIST})
#跟上面的一堆动态、静态库链接起来
TARGET_LINK_LIBRARIES(server ${ECHO_LIBRARY_LIST})
